/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.MemberAttendedMeetingRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberAttendedMeeting extends TableImpl<MemberAttendedMeetingRecord> {

    private static final long serialVersionUID = -873598484;

    /**
     * The reference instance of <code>member_attended_meeting</code>
     */
    public static final MemberAttendedMeeting MEMBER_ATTENDED_MEETING = new MemberAttendedMeeting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberAttendedMeetingRecord> getRecordType() {
        return MemberAttendedMeetingRecord.class;
    }

    /**
     * The column <code>member_attended_meeting.id</code>.
     */
    public final TableField<MemberAttendedMeetingRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>member_attended_meeting.member_id</code>.
     */
    public final TableField<MemberAttendedMeetingRecord, String> MEMBER_ID = createField(DSL.name("member_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>member_attended_meeting.meeting_id</code>.
     */
    public final TableField<MemberAttendedMeetingRecord, String> MEETING_ID = createField(DSL.name("meeting_id"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * Create a <code>member_attended_meeting</code> table reference
     */
    public MemberAttendedMeeting() {
        this(DSL.name("member_attended_meeting"), null);
    }

    /**
     * Create an aliased <code>member_attended_meeting</code> table reference
     */
    public MemberAttendedMeeting(String alias) {
        this(DSL.name(alias), MEMBER_ATTENDED_MEETING);
    }

    /**
     * Create an aliased <code>member_attended_meeting</code> table reference
     */
    public MemberAttendedMeeting(Name alias) {
        this(alias, MEMBER_ATTENDED_MEETING);
    }

    private MemberAttendedMeeting(Name alias, Table<MemberAttendedMeetingRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemberAttendedMeeting(Name alias, Table<MemberAttendedMeetingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MemberAttendedMeeting(Table<O> child, ForeignKey<O, MemberAttendedMeetingRecord> key) {
        super(child, key, MEMBER_ATTENDED_MEETING);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_7, Indexes.FK_ATTENDED_MEETING_INDEX_7, Indexes.FK_ATTENDED_MEMBER_INDEX_7);
    }

    @Override
    public UniqueKey<MemberAttendedMeetingRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<UniqueKey<MemberAttendedMeetingRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberAttendedMeetingRecord>>asList(Keys.CONSTRAINT_7);
    }

    @Override
    public List<ForeignKey<MemberAttendedMeetingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MemberAttendedMeetingRecord, ?>>asList(Keys.FK_ATTENDED_MEMBER, Keys.FK_ATTENDED_MEETING);
    }

    public Member member() {
        return new Member(this, Keys.FK_ATTENDED_MEMBER);
    }

    public Meeting meeting() {
        return new Meeting(this, Keys.FK_ATTENDED_MEETING);
    }

    @Override
    public MemberAttendedMeeting as(String alias) {
        return new MemberAttendedMeeting(DSL.name(alias), this);
    }

    @Override
    public MemberAttendedMeeting as(Name alias) {
        return new MemberAttendedMeeting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberAttendedMeeting rename(String name) {
        return new MemberAttendedMeeting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberAttendedMeeting rename(Name name) {
        return new MemberAttendedMeeting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
