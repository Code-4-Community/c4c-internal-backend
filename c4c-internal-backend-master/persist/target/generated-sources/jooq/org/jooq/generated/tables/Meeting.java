/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.MeetingRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Meeting extends TableImpl<MeetingRecord> {

    private static final long serialVersionUID = -1323251921;

    /**
     * The reference instance of <code>meeting</code>
     */
    public static final Meeting MEETING = new Meeting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeetingRecord> getRecordType() {
        return MeetingRecord.class;
    }

    /**
     * The column <code>meeting.id</code>.
     */
    public final TableField<MeetingRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>meeting.name</code>.
     */
    public final TableField<MeetingRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>meeting.date</code>.
     */
    public final TableField<MeetingRecord, Timestamp> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>meeting.open</code>.
     */
    public final TableField<MeetingRecord, Boolean> OPEN = createField(DSL.name("open"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>meeting</code> table reference
     */
    public Meeting() {
        this(DSL.name("meeting"), null);
    }

    /**
     * Create an aliased <code>meeting</code> table reference
     */
    public Meeting(String alias) {
        this(DSL.name(alias), MEETING);
    }

    /**
     * Create an aliased <code>meeting</code> table reference
     */
    public Meeting(Name alias) {
        this(alias, MEETING);
    }

    private Meeting(Name alias, Table<MeetingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Meeting(Name alias, Table<MeetingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Meeting(Table<O> child, ForeignKey<O, MeetingRecord> key) {
        super(child, key, MEETING);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_3);
    }

    @Override
    public UniqueKey<MeetingRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<UniqueKey<MeetingRecord>> getKeys() {
        return Arrays.<UniqueKey<MeetingRecord>>asList(Keys.CONSTRAINT_3);
    }

    @Override
    public Meeting as(String alias) {
        return new Meeting(DSL.name(alias), this);
    }

    @Override
    public Meeting as(Name alias) {
        return new Meeting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Meeting rename(String name) {
        return new Meeting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meeting rename(Name name) {
        return new Meeting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Timestamp, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
